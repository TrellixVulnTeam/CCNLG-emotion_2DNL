{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"BERT-Emotion","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"bZOIfX6t_76l","colab_type":"code","outputId":"6d68b694-b714-4acc-8353-da8c1b4bc7f6","executionInfo":{"status":"ok","timestamp":1566486708069,"user_tz":240,"elapsed":26013,"user":{"displayName":"Sashank Santhanam","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCIzwtBLac_tfJnYB8l8r38iQFzDnGF6RFueFZv=s64","userId":"15342713093483648898"}},"colab":{"base_uri":"https://localhost:8080/","height":649}},"source":["import tensorflow as tf\n","!pip install pytorch-transformers pytorch-nlp"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Collecting pytorch-transformers\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/50/89/ad0d6bb932d0a51793eaabcf1617a36ff530dc9ab9e38f765a35dc293306/pytorch_transformers-1.1.0-py3-none-any.whl (158kB)\n","\u001b[K     |████████████████████████████████| 163kB 6.3MB/s \n","\u001b[?25hCollecting pytorch-nlp\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/df/ae/b6d18c3f37da5a78e83701469e6153811f4b0ecb3f9387bb3e9a65ca48ee/pytorch_nlp-0.4.1-py3-none-any.whl (82kB)\n","\u001b[K     |████████████████████████████████| 92kB 28.2MB/s \n","\u001b[?25hRequirement already satisfied: torch>=1.0.0 in /usr/local/lib/python3.6/dist-packages (from pytorch-transformers) (1.1.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from pytorch-transformers) (1.16.4)\n","Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from pytorch-transformers) (2.21.0)\n","Requirement already satisfied: boto3 in /usr/local/lib/python3.6/dist-packages (from pytorch-transformers) (1.9.205)\n","Collecting sentencepiece (from pytorch-transformers)\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/14/3d/efb655a670b98f62ec32d66954e1109f403db4d937c50d779a75b9763a29/sentencepiece-0.1.83-cp36-cp36m-manylinux1_x86_64.whl (1.0MB)\n","\u001b[K     |████████████████████████████████| 1.0MB 40.7MB/s \n","\u001b[?25hCollecting regex (from pytorch-transformers)\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/6f/a6/99eeb5904ab763db87af4bd71d9b1dfdd9792681240657a4c0a599c10a81/regex-2019.08.19.tar.gz (654kB)\n","\u001b[K     |████████████████████████████████| 655kB 40.0MB/s \n","\u001b[?25hRequirement already satisfied: tqdm in /usr/local/lib/python3.6/dist-packages (from pytorch-transformers) (4.28.1)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.6/dist-packages (from pytorch-nlp) (0.24.2)\n","Requirement already satisfied: idna<2.9,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->pytorch-transformers) (2.8)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->pytorch-transformers) (2019.6.16)\n","Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->pytorch-transformers) (3.0.4)\n","Requirement already satisfied: urllib3<1.25,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->pytorch-transformers) (1.24.3)\n","Requirement already satisfied: s3transfer<0.3.0,>=0.2.0 in /usr/local/lib/python3.6/dist-packages (from boto3->pytorch-transformers) (0.2.1)\n","Requirement already satisfied: jmespath<1.0.0,>=0.7.1 in /usr/local/lib/python3.6/dist-packages (from boto3->pytorch-transformers) (0.9.4)\n","Requirement already satisfied: botocore<1.13.0,>=1.12.205 in /usr/local/lib/python3.6/dist-packages (from boto3->pytorch-transformers) (1.12.205)\n","Requirement already satisfied: python-dateutil>=2.5.0 in /usr/local/lib/python3.6/dist-packages (from pandas->pytorch-nlp) (2.5.3)\n","Requirement already satisfied: pytz>=2011k in /usr/local/lib/python3.6/dist-packages (from pandas->pytorch-nlp) (2018.9)\n","Requirement already satisfied: docutils<0.15,>=0.10 in /usr/local/lib/python3.6/dist-packages (from botocore<1.13.0,>=1.12.205->boto3->pytorch-transformers) (0.14)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.6/dist-packages (from python-dateutil>=2.5.0->pandas->pytorch-nlp) (1.12.0)\n","Building wheels for collected packages: regex\n","  Building wheel for regex (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for regex: filename=regex-2019.8.19-cp36-cp36m-linux_x86_64.whl size=609232 sha256=4fc76f3289b907c3b325091966c87e76f166ef11892ee8296443e966d310a2e5\n","  Stored in directory: /root/.cache/pip/wheels/90/04/07/b5010fb816721eb3d6dd64ed5cc8111ca23f97fdab8619b5be\n","Successfully built regex\n","Installing collected packages: sentencepiece, regex, pytorch-transformers, pytorch-nlp\n","Successfully installed pytorch-nlp-0.4.1 pytorch-transformers-1.1.0 regex-2019.8.19 sentencepiece-0.1.83\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"A75xw8PkAJ8V","colab_type":"code","outputId":"d67953b9-084c-4e3f-c6b4-2b86a3d0353a","executionInfo":{"status":"ok","timestamp":1566486711057,"user_tz":240,"elapsed":28982,"user":{"displayName":"Sashank Santhanam","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCIzwtBLac_tfJnYB8l8r38iQFzDnGF6RFueFZv=s64","userId":"15342713093483648898"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["import torch\n","from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler\n","from keras.preprocessing.sequence import pad_sequences\n","from sklearn.model_selection import train_test_split\n","from pytorch_transformers import BertTokenizer, BertConfig\n","from pytorch_transformers import AdamW, BertForSequenceClassification\n","from tqdm import tqdm, trange\n","import pandas as pd\n","import io\n","import numpy as np\n","import matplotlib.pyplot as plt\n","% matplotlib inline"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"Jb9Z8KMdAQqz","colab_type":"code","outputId":"3c3aad6d-25d5-4069-ff9c-b63b18bc46b1","executionInfo":{"status":"ok","timestamp":1566486741030,"user_tz":240,"elapsed":58942,"user":{"displayName":"Sashank Santhanam","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCIzwtBLac_tfJnYB8l8r38iQFzDnGF6RFueFZv=s64","userId":"15342713093483648898"}},"colab":{"base_uri":"https://localhost:8080/","height":122}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdocs.test%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.photos.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fpeopleapi.readonly&response_type=code\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"cfgCvn8ZAbe5","colab_type":"code","outputId":"421c29e9-7cd7-4298-c758-39526f72fce6","executionInfo":{"status":"ok","timestamp":1566486742929,"user_tz":240,"elapsed":899,"user":{"displayName":"Sashank Santhanam","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCIzwtBLac_tfJnYB8l8r38iQFzDnGF6RFueFZv=s64","userId":"15342713093483648898"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["%cd /content/drive/My Drive/CCNLG/code"],"execution_count":4,"outputs":[{"output_type":"stream","text":["/content/drive/My Drive/CCNLG/code\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"84wxFt4LAd7P","colab_type":"code","colab":{}},"source":["train_df = pd.read_excel(\"train.xlsx\")\n","valid_df = pd.read_excel(\"valid.xlsx\")\n","test_df = pd.read_excel(\"test.xlsx\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"bpBy8YlWwiPa","colab_type":"code","colab":{}},"source":["# train_df = train_df[:1000]\n","# valid_df = valid_df[:100]\n","# test_df = test_df[:100]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"I0MYwAXQV1oR","colab_type":"code","colab":{}},"source":["labels = list(train_df[\"context\"]) + list(valid_df[\"context\"]) + list(test_df[\"context\"])\n","labels = list(set(labels))\n","labels_to_idx = {k:i for i,k in enumerate(labels)}\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5pBFfwc0Ax_D","colab_type":"code","colab":{}},"source":["#0 fake 1 real\n","train_df[\"labelInts\"] = train_df[\"context\"].apply(lambda x: labels_to_idx[x])\n","valid_df[\"labelInts\"] = valid_df[\"context\"].apply(lambda x: labels_to_idx[x])\n","test_df[\"labelInts\"] = test_df[\"context\"].apply(lambda x: labels_to_idx[x])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"2T90NLezbBeZ","colab_type":"code","outputId":"30e8ee66-8b5d-4fbd-c704-c0d71ac22b16","executionInfo":{"status":"ok","timestamp":1566486758297,"user_tz":240,"elapsed":8780,"user":{"displayName":"Sashank Santhanam","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCIzwtBLac_tfJnYB8l8r38iQFzDnGF6RFueFZv=s64","userId":"15342713093483648898"}},"colab":{"base_uri":"https://localhost:8080/","height":306}},"source":["train_df.head()"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>conv_id</th>\n","      <th>utterance_idx</th>\n","      <th>context</th>\n","      <th>prompt</th>\n","      <th>speaker_idx</th>\n","      <th>utterance</th>\n","      <th>selfeval</th>\n","      <th>tags</th>\n","      <th>Unnamed: 8</th>\n","      <th>Unnamed: 9</th>\n","      <th>Unnamed: 10</th>\n","      <th>labelInts</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>hit:0_conv:1</td>\n","      <td>1</td>\n","      <td>sentimental</td>\n","      <td>I remember going to the fireworks with my best...</td>\n","      <td>1</td>\n","      <td>I remember going to see the fireworks with my ...</td>\n","      <td>5|5|5_2|2|5</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>30</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>hit:0_conv:1</td>\n","      <td>2</td>\n","      <td>sentimental</td>\n","      <td>I remember going to the fireworks with my best...</td>\n","      <td>0</td>\n","      <td>Was this a friend you were in love with_comma_...</td>\n","      <td>5|5|5_2|2|5</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>30</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>hit:0_conv:1</td>\n","      <td>3</td>\n","      <td>sentimental</td>\n","      <td>I remember going to the fireworks with my best...</td>\n","      <td>1</td>\n","      <td>This was a best friend. I miss her.</td>\n","      <td>5|5|5_2|2|5</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>30</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>hit:0_conv:1</td>\n","      <td>4</td>\n","      <td>sentimental</td>\n","      <td>I remember going to the fireworks with my best...</td>\n","      <td>0</td>\n","      <td>Where has she gone?</td>\n","      <td>5|5|5_2|2|5</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>30</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>hit:0_conv:1</td>\n","      <td>5</td>\n","      <td>sentimental</td>\n","      <td>I remember going to the fireworks with my best...</td>\n","      <td>1</td>\n","      <td>We no longer talk.</td>\n","      <td>5|5|5_2|2|5</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>30</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        conv_id  utterance_idx      context  ... Unnamed: 9  Unnamed: 10 labelInts\n","0  hit:0_conv:1              1  sentimental  ...        NaN          NaN        30\n","1  hit:0_conv:1              2  sentimental  ...        NaN          NaN        30\n","2  hit:0_conv:1              3  sentimental  ...        NaN          NaN        30\n","3  hit:0_conv:1              4  sentimental  ...        NaN          NaN        30\n","4  hit:0_conv:1              5  sentimental  ...        NaN          NaN        30\n","\n","[5 rows x 12 columns]"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"markdown","metadata":{"id":"gCgSjOSnBeKA","colab_type":"text"},"source":["Training Phase pre-processing"]},{"cell_type":"code","metadata":{"id":"vy2--v4pBDwz","colab_type":"code","colab":{}},"source":["def prepare_dataset(df, MAX_LEN):\n","  \"\"\"\n","  Input: pass in the training or testing dataframe with columns processed tweets and labelInts\n","  \"\"\"\n","  sentences = df.utterance.values\n","\n","  # We need to add special tokens at the beginning and end of each sentence for BERT to work properly\n","  sentences = [\"[CLS] \" + str(sentence) + \" [SEP]\" for sentence in sentences]\n","  labels = df.labelInts.values\n","  tokenizer = BertTokenizer.from_pretrained('bert-base-uncased', do_lower_case=True)\n","  tokenized_texts = [tokenizer.tokenize(sent) for sent in sentences]\n","\n","  # Pad our input tokens\n","  input_ids = pad_sequences([tokenizer.convert_tokens_to_ids(txt) for txt in tokenized_texts],\n","                            maxlen=MAX_LEN, dtype=\"long\", truncating=\"post\", padding=\"post\")\n","  attention_masks = []\n","\n","  # Create a mask of 1s for each token followed by 0s for padding\n","  for seq in input_ids:\n","    seq_mask = [float(i>0) for i in seq]\n","    attention_masks.append(seq_mask)\n","  return input_ids, labels, attention_masks"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"uw7XKuAqA999","colab_type":"code","outputId":"07999e0d-625e-49e5-de7e-82a757bd828b","executionInfo":{"status":"ok","timestamp":1566486803041,"user_tz":240,"elapsed":45870,"user":{"displayName":"Sashank Santhanam","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCIzwtBLac_tfJnYB8l8r38iQFzDnGF6RFueFZv=s64","userId":"15342713093483648898"}},"colab":{"base_uri":"https://localhost:8080/","height":615}},"source":["MAX_LEN = 200\n","train_inputs, train_labels, train_masks = prepare_dataset(train_df,MAX_LEN)"],"execution_count":10,"outputs":[{"output_type":"stream","text":["100%|██████████| 231508/231508 [00:00<00:00, 312241.32B/s]\n","WARNING: Logging before flag parsing goes to stderr.\n","W0822 15:13:07.725248 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (6518 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:07.758014 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (4241 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:07.796466 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (6380 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:07.832117 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (3185 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:07.834999 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (915 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:07.847607 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (3599 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:07.852083 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (2358 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:08.026082 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (1147 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:08.094044 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (1124 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:08.178164 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (2765 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:08.433147 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (2624 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:08.664705 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (9596 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:08.683980 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (7618 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:08.781362 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (6726 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:08.829638 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (9308 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:08.863278 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (1221 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:08.886663 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (1628 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:09.009366 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (3695 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:09.119895 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (1454 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:09.219022 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (11403 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:09.236655 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (2243 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:09.262521 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (5889 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:09.400552 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (3174 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:09.434403 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (8790 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:09.495696 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (4475 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:09.586676 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (673 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:09.659172 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (7469 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:09.689194 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (10848 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:09.771862 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (4254 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:09.781743 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (564 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:09.832677 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (2334 > 512). Running this sequence through the model will result in indexing errors\n","W0822 15:13:09.881809 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (8596 > 512). Running this sequence through the model will result in indexing errors\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"kZ484Y70BsHz","colab_type":"code","outputId":"4f21678b-aefa-4f4c-e3b4-e8db4531d8f7","executionInfo":{"status":"ok","timestamp":1566486809438,"user_tz":240,"elapsed":48007,"user":{"displayName":"Sashank Santhanam","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCIzwtBLac_tfJnYB8l8r38iQFzDnGF6RFueFZv=s64","userId":"15342713093483648898"}},"colab":{"base_uri":"https://localhost:8080/","height":54}},"source":["validation_inputs, validation_labels, val_masks = prepare_dataset(test_df,MAX_LEN)"],"execution_count":11,"outputs":[{"output_type":"stream","text":["W0822 15:13:27.106878 140262302910336 tokenization_utils.py:516] Token indices sequence length is longer than the specified maximum sequence length for this model (7694 > 512). Running this sequence through the model will result in indexing errors\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"13hEuaA3CVkv","colab_type":"code","colab":{}},"source":["train_inputs = torch.tensor(train_inputs)\n","validation_inputs = torch.tensor(validation_inputs)\n","train_labels = torch.tensor(train_labels)\n","validation_labels = torch.tensor(validation_labels)\n","train_masks = torch.tensor(train_masks)\n","validation_masks = torch.tensor(val_masks)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"p5MSTiW9FH27","colab_type":"code","colab":{}},"source":["# Select a batch size for training. For fine-tuning BERT on a specific task, the authors recommend a batch size of 16 or 32\n","batch_size = 16\n","\n","# Create an iterator of our data with torch DataLoader. This helps save on memory during training because, unlike a for loop, \n","# with an iterator the entire dataset does not need to be loaded into memory\n","\n","train_data = TensorDataset(train_inputs, train_masks, train_labels)\n","train_sampler = RandomSampler(train_data)\n","train_dataloader = DataLoader(train_data, sampler=train_sampler, batch_size=batch_size)\n","\n","validation_data = TensorDataset(validation_inputs, validation_masks, validation_labels)\n","validation_sampler = SequentialSampler(validation_data)\n","validation_dataloader = DataLoader(validation_data, sampler=validation_sampler, batch_size=batch_size)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_Z0pW1pVFOEd","colab_type":"code","outputId":"fa5cdab3-1564-4b0e-f34d-61ba03de698c","executionInfo":{"status":"ok","timestamp":1566486839847,"user_tz":240,"elapsed":73444,"user":{"displayName":"Sashank Santhanam","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCIzwtBLac_tfJnYB8l8r38iQFzDnGF6RFueFZv=s64","userId":"15342713093483648898"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["model = BertForSequenceClassification.from_pretrained(\"bert-base-uncased\", num_labels=len(labels_to_idx))\n","model.cuda()"],"execution_count":14,"outputs":[{"output_type":"stream","text":["100%|██████████| 313/313 [00:00<00:00, 66176.89B/s]\n","100%|██████████| 440473133/440473133 [00:15<00:00, 27914841.24B/s]\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["BertForSequenceClassification(\n","  (bert): BertModel(\n","    (embeddings): BertEmbeddings(\n","      (word_embeddings): Embedding(30522, 768, padding_idx=0)\n","      (position_embeddings): Embedding(512, 768)\n","      (token_type_embeddings): Embedding(2, 768)\n","      (LayerNorm): BertLayerNorm()\n","      (dropout): Dropout(p=0.1)\n","    )\n","    (encoder): BertEncoder(\n","      (layer): ModuleList(\n","        (0): BertLayer(\n","          (attention): BertAttention(\n","            (self): BertSelfAttention(\n","              (query): Linear(in_features=768, out_features=768, bias=True)\n","              (key): Linear(in_features=768, out_features=768, bias=True)\n","              (value): Linear(in_features=768, out_features=768, bias=True)\n","              (dropout): Dropout(p=0.1)\n","            )\n","            (output): BertSelfOutput(\n","              (dense): Linear(in_features=768, out_features=768, bias=True)\n","              (LayerNorm): BertLayerNorm()\n","              (dropout): Dropout(p=0.1)\n","            )\n","          )\n","          (intermediate): BertIntermediate(\n","            (dense): Linear(in_features=768, out_features=3072, bias=True)\n","          )\n","          (output): BertOutput(\n","            (dense): Linear(in_features=3072, out_features=768, bias=True)\n","            (LayerNorm): BertLayerNorm()\n","            (dropout): Dropout(p=0.1)\n","          )\n","        )\n","        (1): BertLayer(\n","          (attention): BertAttention(\n","            (self): BertSelfAttention(\n","              (query): Linear(in_features=768, out_features=768, bias=True)\n","              (key): Linear(in_features=768, out_features=768, bias=True)\n","              (value): Linear(in_features=768, out_features=768, bias=True)\n","              (dropout): Dropout(p=0.1)\n","            )\n","            (output): BertSelfOutput(\n","              (dense): Linear(in_features=768, out_features=768, bias=True)\n","              (LayerNorm): BertLayerNorm()\n","              (dropout): Dropout(p=0.1)\n","            )\n","          )\n","          (intermediate): BertIntermediate(\n","            (dense): Linear(in_features=768, out_features=3072, bias=True)\n","          )\n","          (output): BertOutput(\n","            (dense): Linear(in_features=3072, out_features=768, bias=True)\n","            (LayerNorm): BertLayerNorm()\n","            (dropout): Dropout(p=0.1)\n","          )\n","        )\n","        (2): BertLayer(\n","          (attention): BertAttention(\n","            (self): BertSelfAttention(\n","              (query): Linear(in_features=768, out_features=768, bias=True)\n","              (key): Linear(in_features=768, out_features=768, bias=True)\n","              (value): Linear(in_features=768, out_features=768, bias=True)\n","              (dropout): Dropout(p=0.1)\n","            )\n","            (output): BertSelfOutput(\n","              (dense): Linear(in_features=768, out_features=768, bias=True)\n","              (LayerNorm): BertLayerNorm()\n","              (dropout): Dropout(p=0.1)\n","            )\n","          )\n","          (intermediate): BertIntermediate(\n","            (dense): Linear(in_features=768, out_features=3072, bias=True)\n","          )\n","          (output): BertOutput(\n","            (dense): Linear(in_features=3072, out_features=768, bias=True)\n","            (LayerNorm): BertLayerNorm()\n","            (dropout): Dropout(p=0.1)\n","          )\n","        )\n","        (3): BertLayer(\n","          (attention): BertAttention(\n","            (self): BertSelfAttention(\n","              (query): Linear(in_features=768, out_features=768, bias=True)\n","              (key): Linear(in_features=768, out_features=768, bias=True)\n","              (value): Linear(in_features=768, out_features=768, bias=True)\n","              (dropout): Dropout(p=0.1)\n","            )\n","            (output): BertSelfOutput(\n","              (dense): Linear(in_features=768, out_features=768, bias=True)\n","              (LayerNorm): BertLayerNorm()\n","              (dropout): Dropout(p=0.1)\n","            )\n","          )\n","          (intermediate): BertIntermediate(\n","            (dense): Linear(in_features=768, out_features=3072, bias=True)\n","          )\n","          (output): BertOutput(\n","            (dense): Linear(in_features=3072, out_features=768, bias=True)\n","            (LayerNorm): BertLayerNorm()\n","            (dropout): Dropout(p=0.1)\n","          )\n","        )\n","        (4): BertLayer(\n","          (attention): BertAttention(\n","            (self): BertSelfAttention(\n","              (query): Linear(in_features=768, out_features=768, bias=True)\n","              (key): Linear(in_features=768, out_features=768, bias=True)\n","              (value): Linear(in_features=768, out_features=768, bias=True)\n","              (dropout): Dropout(p=0.1)\n","            )\n","            (output): BertSelfOutput(\n","              (dense): Linear(in_features=768, out_features=768, bias=True)\n","              (LayerNorm): BertLayerNorm()\n","              (dropout): Dropout(p=0.1)\n","            )\n","          )\n","          (intermediate): BertIntermediate(\n","            (dense): Linear(in_features=768, out_features=3072, bias=True)\n","          )\n","          (output): BertOutput(\n","            (dense): Linear(in_features=3072, out_features=768, bias=True)\n","            (LayerNorm): BertLayerNorm()\n","            (dropout): Dropout(p=0.1)\n","          )\n","        )\n","        (5): BertLayer(\n","          (attention): BertAttention(\n","            (self): BertSelfAttention(\n","              (query): Linear(in_features=768, out_features=768, bias=True)\n","              (key): Linear(in_features=768, out_features=768, bias=True)\n","              (value): Linear(in_features=768, out_features=768, bias=True)\n","              (dropout): Dropout(p=0.1)\n","            )\n","            (output): BertSelfOutput(\n","              (dense): Linear(in_features=768, out_features=768, bias=True)\n","              (LayerNorm): BertLayerNorm()\n","              (dropout): Dropout(p=0.1)\n","            )\n","          )\n","          (intermediate): BertIntermediate(\n","            (dense): Linear(in_features=768, out_features=3072, bias=True)\n","          )\n","          (output): BertOutput(\n","            (dense): Linear(in_features=3072, out_features=768, bias=True)\n","            (LayerNorm): BertLayerNorm()\n","            (dropout): Dropout(p=0.1)\n","          )\n","        )\n","        (6): BertLayer(\n","          (attention): BertAttention(\n","            (self): BertSelfAttention(\n","              (query): Linear(in_features=768, out_features=768, bias=True)\n","              (key): Linear(in_features=768, out_features=768, bias=True)\n","              (value): Linear(in_features=768, out_features=768, bias=True)\n","              (dropout): Dropout(p=0.1)\n","            )\n","            (output): BertSelfOutput(\n","              (dense): Linear(in_features=768, out_features=768, bias=True)\n","              (LayerNorm): BertLayerNorm()\n","              (dropout): Dropout(p=0.1)\n","            )\n","          )\n","          (intermediate): BertIntermediate(\n","            (dense): Linear(in_features=768, out_features=3072, bias=True)\n","          )\n","          (output): BertOutput(\n","            (dense): Linear(in_features=3072, out_features=768, bias=True)\n","            (LayerNorm): BertLayerNorm()\n","            (dropout): Dropout(p=0.1)\n","          )\n","        )\n","        (7): BertLayer(\n","          (attention): BertAttention(\n","            (self): BertSelfAttention(\n","              (query): Linear(in_features=768, out_features=768, bias=True)\n","              (key): Linear(in_features=768, out_features=768, bias=True)\n","              (value): Linear(in_features=768, out_features=768, bias=True)\n","              (dropout): Dropout(p=0.1)\n","            )\n","            (output): BertSelfOutput(\n","              (dense): Linear(in_features=768, out_features=768, bias=True)\n","              (LayerNorm): BertLayerNorm()\n","              (dropout): Dropout(p=0.1)\n","            )\n","          )\n","          (intermediate): BertIntermediate(\n","            (dense): Linear(in_features=768, out_features=3072, bias=True)\n","          )\n","          (output): BertOutput(\n","            (dense): Linear(in_features=3072, out_features=768, bias=True)\n","            (LayerNorm): BertLayerNorm()\n","            (dropout): Dropout(p=0.1)\n","          )\n","        )\n","        (8): BertLayer(\n","          (attention): BertAttention(\n","            (self): BertSelfAttention(\n","              (query): Linear(in_features=768, out_features=768, bias=True)\n","              (key): Linear(in_features=768, out_features=768, bias=True)\n","              (value): Linear(in_features=768, out_features=768, bias=True)\n","              (dropout): Dropout(p=0.1)\n","            )\n","            (output): BertSelfOutput(\n","              (dense): Linear(in_features=768, out_features=768, bias=True)\n","              (LayerNorm): BertLayerNorm()\n","              (dropout): Dropout(p=0.1)\n","            )\n","          )\n","          (intermediate): BertIntermediate(\n","            (dense): Linear(in_features=768, out_features=3072, bias=True)\n","          )\n","          (output): BertOutput(\n","            (dense): Linear(in_features=3072, out_features=768, bias=True)\n","            (LayerNorm): BertLayerNorm()\n","            (dropout): Dropout(p=0.1)\n","          )\n","        )\n","        (9): BertLayer(\n","          (attention): BertAttention(\n","            (self): BertSelfAttention(\n","              (query): Linear(in_features=768, out_features=768, bias=True)\n","              (key): Linear(in_features=768, out_features=768, bias=True)\n","              (value): Linear(in_features=768, out_features=768, bias=True)\n","              (dropout): Dropout(p=0.1)\n","            )\n","            (output): BertSelfOutput(\n","              (dense): Linear(in_features=768, out_features=768, bias=True)\n","              (LayerNorm): BertLayerNorm()\n","              (dropout): Dropout(p=0.1)\n","            )\n","          )\n","          (intermediate): BertIntermediate(\n","            (dense): Linear(in_features=768, out_features=3072, bias=True)\n","          )\n","          (output): BertOutput(\n","            (dense): Linear(in_features=3072, out_features=768, bias=True)\n","            (LayerNorm): BertLayerNorm()\n","            (dropout): Dropout(p=0.1)\n","          )\n","        )\n","        (10): BertLayer(\n","          (attention): BertAttention(\n","            (self): BertSelfAttention(\n","              (query): Linear(in_features=768, out_features=768, bias=True)\n","              (key): Linear(in_features=768, out_features=768, bias=True)\n","              (value): Linear(in_features=768, out_features=768, bias=True)\n","              (dropout): Dropout(p=0.1)\n","            )\n","            (output): BertSelfOutput(\n","              (dense): Linear(in_features=768, out_features=768, bias=True)\n","              (LayerNorm): BertLayerNorm()\n","              (dropout): Dropout(p=0.1)\n","            )\n","          )\n","          (intermediate): BertIntermediate(\n","            (dense): Linear(in_features=768, out_features=3072, bias=True)\n","          )\n","          (output): BertOutput(\n","            (dense): Linear(in_features=3072, out_features=768, bias=True)\n","            (LayerNorm): BertLayerNorm()\n","            (dropout): Dropout(p=0.1)\n","          )\n","        )\n","        (11): BertLayer(\n","          (attention): BertAttention(\n","            (self): BertSelfAttention(\n","              (query): Linear(in_features=768, out_features=768, bias=True)\n","              (key): Linear(in_features=768, out_features=768, bias=True)\n","              (value): Linear(in_features=768, out_features=768, bias=True)\n","              (dropout): Dropout(p=0.1)\n","            )\n","            (output): BertSelfOutput(\n","              (dense): Linear(in_features=768, out_features=768, bias=True)\n","              (LayerNorm): BertLayerNorm()\n","              (dropout): Dropout(p=0.1)\n","            )\n","          )\n","          (intermediate): BertIntermediate(\n","            (dense): Linear(in_features=768, out_features=3072, bias=True)\n","          )\n","          (output): BertOutput(\n","            (dense): Linear(in_features=3072, out_features=768, bias=True)\n","            (LayerNorm): BertLayerNorm()\n","            (dropout): Dropout(p=0.1)\n","          )\n","        )\n","      )\n","    )\n","    (pooler): BertPooler(\n","      (dense): Linear(in_features=768, out_features=768, bias=True)\n","      (activation): Tanh()\n","    )\n","  )\n","  (dropout): Dropout(p=0.1)\n","  (classifier): Linear(in_features=768, out_features=32, bias=True)\n",")"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"Cv-20HkBFbR-","colab_type":"code","colab":{}},"source":["param_optimizer = list(model.named_parameters())\n","no_decay = ['bias', 'gamma', 'beta']\n","optimizer_grouped_parameters = [\n","    {'params': [p for n, p in param_optimizer if not any(nd in n for nd in no_decay)],\n","     'weight_decay_rate': 0.01},\n","    {'params': [p for n, p in param_optimizer if any(nd in n for nd in no_decay)],\n","     'weight_decay_rate': 0.0}\n","]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"CcfhosJMFnlp","colab_type":"code","colab":{}},"source":["optimizer = AdamW(optimizer_grouped_parameters,\n","                     lr=2e-5,\n","                     correct_bias=False)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"LsMO6rPbFz2I","colab_type":"code","colab":{}},"source":["def flat_accuracy(preds, labels):\n","    pred_flat = np.argmax(preds, axis=1).flatten()\n","    labels_flat = labels.flatten()\n","    return np.sum(pred_flat == labels_flat) / len(labels_flat)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kFx9tn1HGHZ0","colab_type":"code","outputId":"b45bfcf7-0491-438e-b4ca-62c7f11861f4","executionInfo":{"status":"ok","timestamp":1566486839850,"user_tz":240,"elapsed":67726,"user":{"displayName":"Sashank Santhanam","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCIzwtBLac_tfJnYB8l8r38iQFzDnGF6RFueFZv=s64","userId":"15342713093483648898"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","n_gpu = torch.cuda.device_count()\n","torch.cuda.get_device_name(0)"],"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Tesla K80'"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"id":"rLk4lx8bF3xs","colab_type":"code","outputId":"82972b11-4456-466f-ad76-68637a9e2dd6","executionInfo":{"status":"ok","timestamp":1566422356854,"user_tz":240,"elapsed":35,"user":{"displayName":"Sashank Santhanam","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCIzwtBLac_tfJnYB8l8r38iQFzDnGF6RFueFZv=s64","userId":"15342713093483648898"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["train_loss_set = []\n","\n","# Number of training epochs (authors recommend between 2 and 4)\n","epochs = 10\n","\n","# trange is a tqdm wrapper around the normal python range\n","for _ in trange(epochs, desc=\"Epoch\"):\n","  \n","  \n","  # Training\n","  \n","  # Set our model to training mode (as opposed to evaluation mode)\n","  model.train()\n","  \n","  # Tracking variables\n","  tr_loss = 0\n","  nb_tr_examples, nb_tr_steps = 0, 0\n","  \n","  # Train the data for one epoch\n","  for step, batch in enumerate(train_dataloader):\n","    # Add batch to GPU\n","    batch = tuple(t.to(device) for t in batch)\n","    # Unpack the inputs from our dataloader\n","    b_input_ids, b_input_mask, b_labels = batch\n","    # Clear out the gradients (by default they accumulate)\n","    optimizer.zero_grad()\n","    # Forward pass\n","    outputs = model(b_input_ids, token_type_ids=None, attention_mask=b_input_mask, labels=b_labels)\n","    loss = outputs[0]\n","    train_loss_set.append(loss.item())    \n","    # Backward pass\n","    loss.backward()\n","    # Update parameters and take a step using the computed gradient\n","    optimizer.step()\n","    \n","    \n","    # Update tracking variables\n","    tr_loss += loss.item()\n","    nb_tr_examples += b_input_ids.size(0)\n","    nb_tr_steps += 1\n","\n","  print(\"Train loss: {}\".format(tr_loss/nb_tr_steps))\n","    \n","    \n","  # Validation\n","\n","  # Put model in evaluation mode to evaluate loss on the validation set\n","  model.eval()\n","\n","  # Tracking variables \n","  eval_loss, eval_accuracy = 0, 0\n","  nb_eval_steps, nb_eval_examples = 0, 0\n","\n","  # Evaluate data for one epoch\n","  for batch in validation_dataloader:\n","    # Add batch to GPU\n","    batch = tuple(t.to(device) for t in batch)\n","    # Unpack the inputs from our dataloader\n","    b_input_ids, b_input_mask, b_labels = batch\n","    # Telling the model not to compute or store gradients, saving memory and speeding up validation\n","    with torch.no_grad():\n","      # Forward pass, calculate logit predictions\n","      outputs = model(b_input_ids, token_type_ids=None, attention_mask=b_input_mask)\n","    # Move logits and labels to CPU\n","#     print(outputs)\n","    logits = outputs[0]\n","    logits = logits.detach().cpu().numpy()\n","    label_ids = b_labels.to('cpu').numpy()\n","\n","    tmp_eval_accuracy = flat_accuracy(logits, label_ids)\n","    \n","    eval_accuracy += tmp_eval_accuracy\n","    nb_eval_steps += 1\n","\n","  print(\"Validation Accuracy: {}\".format(eval_accuracy/nb_eval_steps))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["\rEpoch:   0%|          | 0/10 [00:00<?, ?it/s]"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"1jgD8fjydM_n","colab_type":"code","outputId":"b67ff397-371a-47e8-e4aa-40ec83c07564","executionInfo":{"status":"ok","timestamp":1565905228597,"user_tz":240,"elapsed":1310,"user":{"displayName":"Sashank Santhanam","photoUrl":"https://lh6.googleusercontent.com/-xXgF1GKQnjI/AAAAAAAAAAI/AAAAAAAAABI/IYrDIyDtwCE/s64/photo.jpg","userId":"15342713093483648898"}},"colab":{"base_uri":"https://localhost:8080/","height":513}},"source":["plt.figure(figsize=(15,8))\n","plt.title(\"Training loss\")\n","plt.xlabel(\"Batch\")\n","plt.ylabel(\"Loss\")\n","plt.plot(train_loss_set)\n","plt.show()"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAA3sAAAHwCAYAAAAfJXbRAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzs3Xe8JFWd9/HvmRmyJGVUFHVQcVkQ\nFUHUZdfFsCyIgoFVdPVZdQ3Pruuuj3FWFkGCsARRARUQSZKDMDADA8PkwESYnOOdfCfduWFuPs8f\n9/a9fburu6uqT6Xuz/v14sXc7qpzTldVV59fnWSstQIAAAAA1JZhSRcAAAAAAOAewR4AAAAA1CCC\nPQAAAACoQQR7AAAAAFCDCPYAAAAAoAYR7AEAAABADSLYAwDUBWPMcGNMizHmrS63DVGOq40x97hO\nFwCAQiOSLgAAAF6MMS15fx4uqUNST//f37HWPhAkPWttj6TXuN4WAIC0ItgDAKSStXYg2DLGbJD0\nTWvthFLbG2NGWGu74ygbAABZQDdOAEAm9XeHfMQY85AxplnSV4wxHzbGvGyM2WeM2WaM+a0x5qD+\n7UcYY6wxZlT/33/uf/85Y0yzMWaWMebEoNv2v3++MWaVMabJGHOLMWaGMeZrPj/HZ40xS/vLPNEY\n81d57/3MGLPVGLPfGLPCGHNO/+sfMsYs6H99hzHmBgeHFABQYwj2AABZ9llJD0o6WtIjkrol/Zek\n4ySdLek8Sd8ps/+XJV0m6bWSNkm6Kui2xpjXS3pU0o/7810v6Sw/hTfG/LWk+yV9T9JISRMkjTHG\nHGSMObW/7O+31h4l6fz+fCXpFkk39L/+TkmP+8kPAFBfCPYAAFk23Vr7jLW211p7wFo711o721rb\nba1dJ+kOSX9fZv/HrbXzrLVdkh6Q9L4Q235K0qvW2qf737tZ0i6f5b9E0hhr7cT+fa9TX+D6QfUF\nrodKOrW/i+r6/s8kSV2STjLGvM5a22ytne0zPwBAHSHYAwBkWUP+H8aYk40xY40x240x+yVdqb7W\ntlK25/27TeUnZSm17Zvyy2GttZI2+yh7bt+Nefv29u/7ZmvtSkk/VN9n2NnfXfWN/Zt+XdIpklYa\nY+YYYz7pMz8AQB0h2AMAZJkt+Pt2SUskvbO/i+PPJZmIy7BN0gm5P4wxRtKbfe67VdLb8vYd1p/W\n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\n","text/plain":["<Figure size 1080x576 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"W6WXHFG-dYvh","colab_type":"code","colab":{}},"source":["test_inputs, test_labels, test_masks = prepare_dataset(test_df,MAX_LEN)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"cuTgux4tdi_u","colab_type":"code","colab":{}},"source":["test_inputs = torch.tensor(test_inputs)\n","test_labels = torch.tensor(test_labels)\n","test_masks = torch.tensor(test_masks)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5M-3eyHvd7n9","colab_type":"code","colab":{}},"source":["batch_size = 16\n","test_data = TensorDataset(test_inputs, test_masks, test_labels)\n","test_sampler = SequentialSampler(test_data)\n","test_dataloader = DataLoader(test_data, sampler=test_sampler, batch_size=batch_size)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"xUYmgFHCezVz","colab_type":"code","colab":{}},"source":["torch.save({'state_dict':model.state_dict(),\n","           \"optimize_state_dict\":optimizer.state_dict(),\n","          },\"model_bert_unique.pth\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"MBWi0lieeu9C","colab_type":"code","colab":{}},"source":["model.eval()\n","\n","# Tracking variables \n","predictions , true_labels = [], []\n","\n","# Predict \n","for batch in test_dataloader:\n","  # Add batch to GPU\n","  batch = tuple(t.to(device) for t in batch)\n","  # Unpack the inputs from our dataloader\n","  b_input_ids, b_input_mask, b_labels = batch\n","  # Telling the model not to compute or store gradients, saving memory and speeding up prediction\n","  with torch.no_grad():\n","    # Forward pass, calculate logit predictions\n","    logits = model(b_input_ids, token_type_ids=None, attention_mask=b_input_mask)\n","\n","  # Move logits and labels to CPU\n","  logits = logits.detach().cpu().numpy()\n","  label_ids = b_labels.to('cpu').numpy()\n","  \n","  # Store predictions and true labels\n","  predictions.append(logits)\n","  true_labels.append(label_ids)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"NltyOu9-g5zL","colab_type":"code","colab":{}},"source":["flat_predictions = [item for sublist in predictions for item in sublist]\n","flat_predictions = np.argmax(flat_predictions, axis=1).flatten()\n","flat_true_labels = [item for sublist in true_labels for item in sublist]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_BTvY_LfhAE_","colab_type":"code","colab":{}},"source":["from sklearn.metrics import classification_report"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3vfbmIkEhB5P","colab_type":"code","outputId":"5d2c2111-56c6-4345-d950-8686e2f7b4e0","executionInfo":{"status":"ok","timestamp":1565905423766,"user_tz":240,"elapsed":158541,"user":{"displayName":"Sashank Santhanam","photoUrl":"https://lh6.googleusercontent.com/-xXgF1GKQnjI/AAAAAAAAAAI/AAAAAAAAABI/IYrDIyDtwCE/s64/photo.jpg","userId":"15342713093483648898"}},"colab":{"base_uri":"https://localhost:8080/","height":170}},"source":["print(classification_report(flat_true_labels, flat_predictions))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           0       0.88      0.83      0.85      4752\n","           1       0.89      0.93      0.91      7383\n","\n","    accuracy                           0.89     12135\n","   macro avg       0.89      0.88      0.88     12135\n","weighted avg       0.89      0.89      0.89     12135\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"PrHyLRy8hEGv","colab_type":"code","outputId":"6e1a65c5-3ca7-498a-ea3e-f7a477722e29","executionInfo":{"status":"error","timestamp":1565895216758,"user_tz":240,"elapsed":607,"user":{"displayName":"Alireza Karduni","photoUrl":"","userId":"16608708813703075774"}},"colab":{"base_uri":"https://localhost:8080/","height":163}},"source":["dataset.head()"],"execution_count":0,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-d48d03506017>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'dataset' is not defined"]}]},{"cell_type":"code","metadata":{"id":"ulKO6YcloGT9","colab_type":"code","outputId":"d7fb2f16-f40b-4d2b-d19f-6f35b193f14b","executionInfo":{"status":"ok","timestamp":1565895461164,"user_tz":240,"elapsed":4786,"user":{"displayName":"Alireza Karduni","photoUrl":"","userId":"16608708813703075774"}},"colab":{"base_uri":"https://localhost:8080/","height":289}},"source":["dataset.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>binaryLabel</th>\n","      <th>create_at</th>\n","      <th>face_image</th>\n","      <th>fullLabel</th>\n","      <th>id_str</th>\n","      <th>origPath</th>\n","      <th>position</th>\n","      <th>screen_name</th>\n","      <th>text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Real</td>\n","      <td>Sat Oct 28 02:01:58 +0000 2017</td>\n","      <td>[[[177, 182, 175], [181, 186, 179], [185, 188,...</td>\n","      <td>verified</td>\n","      <td>924093855431102464</td>\n","      <td>http://caprica.uncc.edu:81/ABCWorldNews/924093...</td>\n","      <td>(0, 433, 244, 139)</td>\n","      <td>ABCWorldNews</td>\n","      <td>Letters from Harper Lee to friend sell for $12...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Fake</td>\n","      <td>Mon Nov 13 19:30:03 +0000 2017</td>\n","      <td>[[[69, 29, 30], [69, 29, 30], [68, 29, 32], [6...</td>\n","      <td>Propaganda</td>\n","      <td>930155817956864000</td>\n","      <td>http://caprica.uncc.edu:81/infowars/9301393570...</td>\n","      <td>(218, 1140, 336, 1022)</td>\n","      <td>infowars</td>\n","      <td>Disgusting: Austin Drag Queen Dungeon Discover...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Real</td>\n","      <td>Mon Oct 30 06:35:05 +0000 2017</td>\n","      <td>[[[44, 39, 46], [43, 36, 43], [36, 27, 30], [4...</td>\n","      <td>verified</td>\n","      <td>924887362571853829</td>\n","      <td>http://caprica.uncc.edu:81/TheStarKenya/924887...</td>\n","      <td>(208, 669, 265, 612)</td>\n","      <td>TheStarKenya</td>\n","      <td>Saudi Arabia to allow women into sports stadiu...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Fake</td>\n","      <td>Thu Nov 02 10:01:51 +0000 2017</td>\n","      <td>[[[57, 62, 58], [27, 32, 28], [24, 29, 25], [2...</td>\n","      <td>Propaganda</td>\n","      <td>926026560041373696</td>\n","      <td>http://caprica.uncc.edu:81/IntersectionEN/9260...</td>\n","      <td>(285, 32, 325, 0)</td>\n","      <td>IntersectionEN</td>\n","      <td>Hazing, Suicides and Unreported Deaths in the ...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Real</td>\n","      <td>Fri Nov 03 21:04:09 +0000 2017</td>\n","      <td>[[[16, 11, 31], [20, 15, 38], [21, 17, 44], [2...</td>\n","      <td>verified</td>\n","      <td>926555620303499264</td>\n","      <td>http://caprica.uncc.edu:81/France24_en/9265556...</td>\n","      <td>(201, 476, 249, 428)</td>\n","      <td>France24_en</td>\n","      <td>MEDIAWATCH - Sticking it to Trump: Twitter wor...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  binaryLabel  ...                                               text\n","0        Real  ...  Letters from Harper Lee to friend sell for $12...\n","1        Fake  ...  Disgusting: Austin Drag Queen Dungeon Discover...\n","2        Real  ...  Saudi Arabia to allow women into sports stadiu...\n","3        Fake  ...  Hazing, Suicides and Unreported Deaths in the ...\n","4        Real  ...  MEDIAWATCH - Sticking it to Trump: Twitter wor...\n","\n","[5 rows x 9 columns]"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"id":"YHIXVA01ofJ7","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wQjI3fSxpQXq","colab_type":"code","outputId":"1809fc9a-176a-4ad9-ec37-adccc6f17f8f","executionInfo":{"status":"ok","timestamp":1565895986778,"user_tz":240,"elapsed":369,"user":{"displayName":"Alireza Karduni","photoUrl":"","userId":"16608708813703075774"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["len(uniqueDf)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["60675"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"code","metadata":{"id":"ihYxPPacpSVh","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}